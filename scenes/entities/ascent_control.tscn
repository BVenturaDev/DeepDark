[gd_scene load_steps=23 format=3 uid="uid://bahc3m2a6mh32"]

[ext_resource type="Script" path="res://src/entities/ascent_control.gd" id="1_ob4be"]

[sub_resource type="Shader" id="Shader_6tkru"]
code = "shader_type spatial;
render_mode cull_front, unshaded;

uniform vec4 outline_color : source_color;
uniform float outline_width = 4.0;
uniform bool is_targeted;

void vertex() {
	if (is_targeted)
	{
		vec4 clip_position = PROJECTION_MATRIX * (MODELVIEW_MATRIX * vec4(VERTEX, 1.0));
		vec3 clip_normal = mat3(PROJECTION_MATRIX) * (mat3(MODELVIEW_MATRIX) * NORMAL);
		
		vec2 offset = normalize(clip_normal.xy) / VIEWPORT_SIZE * clip_position.w * outline_width * 2.0;
		
		clip_position.xy += offset;
		
		POSITION = clip_position;
	}
}

void fragment() {
	ALBEDO = outline_color.rgb;
	if (outline_color.a < 1.0) {
		ALPHA = outline_color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_23r5n"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_6tkru")
shader_parameter/outline_color = Color(1, 1, 1, 1)
shader_parameter/outline_width = 2.0
shader_parameter/is_targeted = false

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_mqw5p"]
next_pass = SubResource("ShaderMaterial_23r5n")
albedo_color = Color(0.166119, 0.211287, 0.251321, 1)

[sub_resource type="BoxMesh" id="BoxMesh_asdoo"]
resource_local_to_scene = true
material = SubResource("StandardMaterial3D_mqw5p")
size = Vector3(0.1, 0.05, 0.1)

[sub_resource type="BoxShape3D" id="BoxShape3D_5pauc"]
size = Vector3(0.25, 0.3, 0.25)

[sub_resource type="Shader" id="Shader_42uym"]
code = "shader_type spatial;
render_mode cull_front, unshaded;

uniform vec4 outline_color : source_color;
uniform float outline_width = 4.0;
uniform bool is_targeted;

void vertex() {
	if (is_targeted)
	{
		vec4 clip_position = PROJECTION_MATRIX * (MODELVIEW_MATRIX * vec4(VERTEX, 1.0));
		vec3 clip_normal = mat3(PROJECTION_MATRIX) * (mat3(MODELVIEW_MATRIX) * NORMAL);
		
		vec2 offset = normalize(clip_normal.xy) / VIEWPORT_SIZE * clip_position.w * outline_width * 2.0;
		
		clip_position.xy += offset;
		
		POSITION = clip_position;
	}
}

void fragment() {
	ALBEDO = outline_color.rgb;
	if (outline_color.a < 1.0) {
		ALPHA = outline_color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_opw1q"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_42uym")
shader_parameter/outline_color = Color(1, 1, 1, 1)
shader_parameter/outline_width = 2.0
shader_parameter/is_targeted = false

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_jbvb5"]
next_pass = SubResource("ShaderMaterial_opw1q")
albedo_color = Color(0.103744, 0.103744, 0.103744, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_yybb0"]
material = SubResource("StandardMaterial3D_jbvb5")
top_radius = 0.01
bottom_radius = 0.01
height = 0.1

[sub_resource type="Shader" id="Shader_ia27p"]
code = "shader_type spatial;
render_mode cull_front, unshaded;

uniform vec4 outline_color : source_color;
uniform float outline_width = 4.0;
uniform bool is_targeted;

void vertex() {
	if (is_targeted)
	{
		vec4 clip_position = PROJECTION_MATRIX * (MODELVIEW_MATRIX * vec4(VERTEX, 1.0));
		vec3 clip_normal = mat3(PROJECTION_MATRIX) * (mat3(MODELVIEW_MATRIX) * NORMAL);
		
		vec2 offset = normalize(clip_normal.xy) / VIEWPORT_SIZE * clip_position.w * outline_width * 2.0;
		
		clip_position.xy += offset;
		
		POSITION = clip_position;
	}
}

void fragment() {
	ALBEDO = outline_color.rgb;
	if (outline_color.a < 1.0) {
		ALPHA = outline_color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0fcoc"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_ia27p")
shader_parameter/outline_color = Color(1, 1, 1, 1)
shader_parameter/outline_width = 2.0
shader_parameter/is_targeted = false

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_m0c4j"]
next_pass = SubResource("ShaderMaterial_0fcoc")
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_bppr5"]
material = SubResource("StandardMaterial3D_m0c4j")
top_radius = 0.015
bottom_radius = 0.015
height = 0.125

[sub_resource type="Animation" id="Animation_u8gwv"]
resource_name = "tilt_forward"
length = 0.001
tracks/0/type = "bezier"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("TiltControl:rotation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(-0.785398, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/1/type = "bezier"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("TiltControl:rotation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/2/type = "bezier"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("TiltControl:rotation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}

[sub_resource type="Animation" id="Animation_35m02"]
resource_name = "tilt_back"
length = 0.001
tracks/0/type = "bezier"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("TiltControl:rotation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0.785398, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/1/type = "bezier"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("TiltControl:rotation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/2/type = "bezier"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("TiltControl:rotation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}

[sub_resource type="Animation" id="Animation_nboam"]
resource_name = "tilt_neutral"
length = 0.001
tracks/0/type = "bezier"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("TiltControl:rotation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/1/type = "bezier"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("TiltControl:rotation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/2/type = "bezier"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("TiltControl:rotation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_migux"]
_data = {
"tilt_back": SubResource("Animation_35m02"),
"tilt_forward": SubResource("Animation_u8gwv"),
"tilt_neutral": SubResource("Animation_nboam")
}

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_uyu6m"]
animation = &"tilt_neutral"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_c5l5x"]
animation = &"tilt_forward"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_8my7e"]
animation = &"tilt_back"

[sub_resource type="AnimationNodeBlendSpace1D" id="AnimationNodeBlendSpace1D_xt0lh"]
blend_point_0/node = SubResource("AnimationNodeAnimation_uyu6m")
blend_point_0/pos = 0.0
blend_point_1/node = SubResource("AnimationNodeAnimation_c5l5x")
blend_point_1/pos = 1.0
blend_point_2/node = SubResource("AnimationNodeAnimation_8my7e")
blend_point_2/pos = -1.0

[node name="AscentControl" type="StaticBody3D" groups=["interactable"]]
collision_layer = 8
collision_mask = 8
script = ExtResource("1_ob4be")

[node name="MeshInstance3DPad" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_asdoo")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.112705, 0)
shape = SubResource("BoxShape3D_5pauc")

[node name="TiltControl" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.999999, -0.00117928, 0, 0.00117928, 0.999999, 0, 0, 0)

[node name="MeshInstanceStick" type="MeshInstance3D" parent="TiltControl"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.035, 0.0359893, 0)
mesh = SubResource("CylinderMesh_yybb0")

[node name="MeshInstanceStick2" type="MeshInstance3D" parent="TiltControl"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.035, 0.0359893, 0)
mesh = SubResource("CylinderMesh_yybb0")

[node name="MeshInstanceStick3" type="MeshInstance3D" parent="TiltControl"]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, 0, 0.0898954, 0)
mesh = SubResource("CylinderMesh_bppr5")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_migux")
}

[node name="AnimationTree" type="AnimationTree" parent="."]
tree_root = SubResource("AnimationNodeBlendSpace1D_xt0lh")
anim_player = NodePath("../AnimationPlayer")
parameters/blend_position = -0.0015015
